cmdhistory=["(ns virgo.core)\\r\\n\\r\\n(defn foo\\r\\n  \\"I don't do a whole lot.\\"\\r\\n  [x]\\r\\n  (println x \\"Hello, World\!\\"))" "(foo 123)" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    \\"hello ithomer.net\\"})\\r\\n\\r\\n(run-server app {\:ip \\"172.27.22.21\\" \:port 8888 \:thread 10})\\r\\n(println \\"look at\: http\://172.27.22.21\:8888\\")" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    \\"hello ithomer.net\\"})\\r\\n\\r\\n(run-server app {\:ip \\"172.27.22.21\\" \:port 8888 \:thread 10})" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    \\"hello ithomer.net\\"})\\r\\n\\r\\n(run-server app {\:port 8888 \:thread 10})" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    (str \\"hello ithomer.net\\" req)})\\r\\n\\r\\n(run-server app { \:port 8888 \:thread 10})" "(def server (run-server app { \:port 8080 \:thread 10}))" "(def server nil)" "server" "(def server (run-server app { \:port 8080 \:thread 10}))" "(ns virgo.httpkit.proxy-test\\r\\n  (\:use [org.httpkit.server \:only [run-server async-response]]\\r\\n        [org.httpkit.client \:only [request]]))\\r\\n  \\r\\n(defn- proxy-opts [req]\\r\\n  {\:url (str \\"http\://localhost\:8080\\" (\:uri req)\\r\\n             (if-let [q (\:query-string req)]\\r\\n               (str \\"?\\" q)\\r\\n               \\"\\"))\\r\\n   \:timeout 30000 ;ms\\r\\n   \:method (\:request-method req)\\r\\n   \:headers (assoc (\:headers req)\\r\\n              \\"X-Forwarded-For\\" (\:remote-addr req))\\r\\n   \:body (\:body req)})" "(run-server \#'app {\:port 8080})" "(stop-server)" "server" "(reset\! server nil)" "server" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    (str \\"hello ithomer.net\\" req)})\\r\\n\\r\\n;(run-server app { \:port 8888 \:thread 10})\\r\\n\\r\\n(defonce server (atom nil))" "(defn stop-server []\\r\\n  (when-not (nil? @server)\\r\\n    ;; graceful shutdown\: wait 100ms for existing requests to be finished\\r\\n    ;; \:timeout is optional, when no timeout, stop immediately\\r\\n    (@server \:timeout 100)\\r\\n    (reset\! server nil)))" "(defn -main [&args]\\r\\n  ;; The \#' is useful when you want to hot-reload code\\r\\n  ;; You may want to take a look\: https\://github.com/clojure/tools.namespace\\r\\n  ;; and http\://http-kit.org/migration.html\#reload\\r\\n  (reset\! server (run-server \#'app {\:port 8080})))" "(-main)" "(-main nil)" "(stop-server)" "(-main nil)" "(ns virgo.web\\r\\n  (\:use org.httpkit.server))\\r\\n\\r\\n(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    (str \\"hello ithomer.net\\" req)})\\r\\n\\r\\n;(run-server app { \:port 8888 \:thread 10})\\r\\n\\r\\n(defonce server (atom nil))\\r\\n\\r\\n(defn stop-server []\\r\\n  (when-not (nil? @server)\\r\\n    ;; graceful shutdown\: wait 100ms for existing requests to be finished\\r\\n    ;; \:timeout is optional, when no timeout, stop immediately\\r\\n    (@server \:timeout 100)\\r\\n    (reset\! server nil)))\\r\\n\\r\\n(defn -main [&args]\\r\\n  ;; The \#' is useful when you want to hot-reload code\\r\\n  ;; You may want to take a look\: https\://github.com/clojure/tools.namespace\\r\\n  ;; and http\://http-kit.org/migration.html\#reload\\r\\n  (reset\! server (run-server \#'app {\:port 8080})))" "(-main)" "(-main nil)" "(stop-server)" "(ns virgo.compojure\\r\\n  (\:use [compojure.route \:only [files not-found]]\\r\\n      [compojure.handler \:only [site]] ; form, query params decode; cookie; session, etc\\r\\n      [compojure.core \:only [defroutes GET POST DELETE ANY context]]\\r\\n      org.httpkit.server)\\r\\n  (\:require [compojure.route \:as route]))\\r\\n\\r\\n(defn show-landing-page [req] ;; ordinary clojure function, accepts a request map, returns a response map\\r\\n  ;; return landing page's html string. Using template library is a good idea\:\\r\\n  ;; mustache (https\://github.com/shenfeng/mustache.clj, https\://github.com/fhd/clostache...)\\r\\n  ;; enlive (https\://github.com/cgrand/enlive)\\r\\n  ;; hiccup(https\://github.com/weavejester/hiccup)\\r\\n  (println \\"<h1>Hello World</h1>\\")  \\r\\n  )\\r\\n\\r\\n(defn update-userinfo [req]          ;; ordinary clojure function\\r\\n  (let [user-id (-> req \:params \:id)    ; param from uri\\r\\n        password (-> req \:params \:password)] ; form param\\r\\n    (print user-id password)))\\r\\n\\r\\n(defroutes all-routes\\r\\n  (GET \\"/\\" [] show-landing-page)\\r\\n  ;(GET \\"/ws\\" [] chat-handler)     ;; websocket\\r\\n  ;(GET \\"/async\\" [] async-handler) ;; asynchronous(long polling)\\r\\n  (context \\"/user/\:id\\" []\\r\\n           (GET / [] get-user-by-id)\\r\\n           (POST / [] update-userinfo))\\r\\n  (route/files \\"/static/\\") ;; static file url prefix /static, in `public` folder\\r\\n  (route/not-found \\"<p>Page not found.</p>\\")) ;; all other, return 404\\r\\n\\r\\n(run-server (site \#'all-routes) {\:port 8080})" "(ns compojure.route\\r\\n  \\"Functions for defining common types of routes.\\"\\r\\n  (\:require [compojure.response \:as response]\\r\\n            [compojure.core \:refer [GET rfn]]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [ring.util.response \:refer [file-response resource-response\\r\\n                                        status content-type]]))\\r\\n\\r\\n(defn- add-wildcard [^String path]\\r\\n  (str path (if (.endsWith path \\"/\\") \\"*\\" \\"/*\\")))\\r\\n\\r\\n(defn- add-mime-type [response path options]\\r\\n  (if-let [mime-type (mime/ext-mime-type path (\:mime-types options {}))]\\r\\n    (content-type response mime-type)\\r\\n    response))\\r\\n\\r\\n(defn files\\r\\n  \\"Returns a route for serving static files from a directory.\\r\\n\\r\\n  Accepts the following options\:\\r\\n\\r\\n  \:root\\r\\n  \: the root path where the files are stored, defaults to \\\\\\"public\\\\\\"\\r\\n\\r\\n  \:mime-types\\r\\n  \: an optional map of file extensions to mime types\\"\\r\\n  ([path]\\r\\n   (files path {}))\\r\\n  ([path options]\\r\\n   (GET (add-wildcard path) {{file-path \:*} \:route-params}\\r\\n     (let [options  (merge {\:root \\"public\\"} options)\\r\\n           response (file-response file-path options)]\\r\\n       (if response\\r\\n         (add-mime-type response (str (\:body response)) options))))))\\r\\n\\r\\n(defn resources\\r\\n  \\"Returns a route for serving resources on the classpath.\\r\\n\\r\\n  Accepts the following options\:\\r\\n\\r\\n  \:root\\r\\n  \: the root prefix path of the resources, defaults to \\\\\\"public\\\\\\"\\r\\n\\r\\n  \:mime-types\\r\\n  \: an optional map of file extensions to mime types\\"\\r\\n  ([path]\\r\\n   (resources path {}))\\r\\n  ([path options]\\r\\n   (GET (add-wildcard path) {{resource-path \:*} \:route-params}\\r\\n     (let [root (\:root options \\"public\\")]\\r\\n       (some-> (resource-response (str root \\"/\\" resource-path))\\r\\n               (add-mime-type resource-path options))))))\\r\\n\\r\\n(defn not-found\\r\\n  \\"Returns a route that always returns a 404 \\\\\\"Not Found\\\\\\" response with the\\r\\n  supplied response body. The response body may be anything accepted by the\\r\\n  [[response/render]] function.\\"\\r\\n  [body]\\r\\n  (fn [request]\\r\\n    (-> (response/render body request)\\r\\n        (status 404)\\r\\n        (cond-> (\= (\:request-method request) \:head) (assoc \:body nil)))))" "(ns virgo.compojure\\r\\n  (\:use [compojure.route \:only [files not-found]]\\r\\n      [compojure.handler \:only [site]] ; form, query params decode; cookie; session, etc\\r\\n      [compojure.core \:only [defroutes GET POST DELETE ANY context]]\\r\\n      org.httpkit.server)\\r\\n  (\:require [compojure.route \:as route]))\\r\\n\\r\\n(defn show-landing-page [req] ;; ordinary clojure function, accepts a request map, returns a response map\\r\\n  ;; return landing page's html string. Using template library is a good idea\:\\r\\n  ;; mustache (https\://github.com/shenfeng/mustache.clj, https\://github.com/fhd/clostache...)\\r\\n  ;; enlive (https\://github.com/cgrand/enlive)\\r\\n  ;; hiccup(https\://github.com/weavejester/hiccup)\\r\\n  (println \\"<h1>Hello World</h1>\\")  \\r\\n  )\\r\\n\\r\\n(defn update-userinfo [req]          ;; ordinary clojure function\\r\\n  (let [user-id (-> req \:params \:id)    ; param from uri\\r\\n        password (-> req \:params \:password)] ; form param\\r\\n    (print user-id password)))\\r\\n\\r\\n(defroutes all-routes\\r\\n  (GET \\"/\\" [] show-landing-page)\\r\\n  ;(GET \\"/ws\\" [] chat-handler)     ;; websocket\\r\\n  ;(GET \\"/async\\" [] async-handler) ;; asynchronous(long polling)\\r\\n  (context \\"/user/\:id\\" []\\r\\n           (GET / [] get-user-by-id)\\r\\n           (POST / [] update-userinfo))\\r\\n  (route/files \\"/static/\\") ;; static file url prefix /static, in `public` folder\\r\\n  (route/not-found \\"<p>Page not found.</p>\\")) ;; all other, return 404\\r\\n\\r\\n(run-server (site \#'all-routes) {\:port 8080})" "(require 'compojure.core)" "(ns user)" "(require 'compojure/handler)" "(require 'clojure.set)" "(require 'compojure.core)" "(require 'org.httpkit.server)" "(require 'compojure.core)" "(use 'compojure.core)" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PringWriter w)]\\r\\n        (.println out (str (.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request []\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (java.net.UTIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri) \\"/\\" uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (prinln (str \\"executing request\\"))\\r\\n    (prinln (str \\"method \: \\" (name method)))\\r\\n    (prinln (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\")])))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap| runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request []\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-requst )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri) \\"/\\" uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))" "(+ 1 2)" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n          \\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]))" "(ns virgo.helper\\r\\n     (\:require [clojure.java.io \:as jio]\\r\\n               [clojure.string \:as str]\\r\\n               [org.httpkit.client \:as client]\\r\\n               [compojure.route \:as route]\\r\\n               [compojure.core \:as comp]\\r\\n             \\r\\n               [clojure.xml \:as xml]))" "(ns virgo.helper\\r\\n        (\:require [clojure.java.io \:as jio]\\r\\n                  [clojure.string \:as str]\\r\\n                  [org.httpkit.client \:as client]\\r\\n                  [compojure.route \:as route]\\r\\n                  [compojure.core \:as comp]))" "(ns virgo.helper\\r\\n           (\:require [clojure.java.io \:as jio]\\r\\n                     [clojure.string \:as str]\\r\\n                     [org.httpkit.client \:as client]\\r\\n                     [compojure.route \:as route]))" "(ns virgo.helper\\r\\n           (\:require [clojure.java.io \:as jio]\\r\\n                     [clojure.string \:as str]\\r\\n                     [compojure.route \:as route]))" "(ns virgo.helper\\r\\n              (\:require [clojure.java.io \:as jio]\\r\\n                        [clojure.string \:as str]))" "(ns virgo.compojure\\r\\n  (\:use [compojure.route \:only [files not-found]]\\r\\n        [compojure.handler \:only [site]] ; form, query params decode; cookie; session, etc\\r\\n        [compojure.core \:only [defroutes GET POST DELETE ANY context]]\\r\\n        org.httpkit.server)\\r\\n  (\:require [compojure.route \:as route]))" "(ns virgo.helper\\r\\n              (\:require\\r\\n                        [compojure.route \:as route]))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request []\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-requst )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri) \\"/\\" uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request []\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-requst )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-requst )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-requst )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(command-line-balancer [\\"post\\" \\"server/server/10002\\"])" "(command-line-balancer [\:post \\"server/server/10002\\"])" "(name post)" "(name \:post)" "(run-tunnel \:post \\"server/server/10002\\")" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(run-tunnel \:post \\"server/server/10002\\")" "(run-tunnel \\"post\\" \\"server/server/10002\\")" "(ns virgo.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" (name method)))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(run-tunnel \\"get\\" \\"hello\\")" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "@runners" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "@runners" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "@runners" "(run-tunnel \\"post\\" \\"/server/server/10003\\")" "@runners" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "@runners" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "@runners" "(ns virgo.core)" "(ns virgo.helper)" "(run-tunnel \\"get\\" \\"hello\\")" "@tunnel-routes" "(run-tunnel \\"get\\" \\"/hello\\")" "(run-tunnel \:get \\"/hello\\")" "@runners" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(ns virgo.core)" "(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\n                                                      (prn request)\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))" "(run-tunnel \\"post\\" \\"/server2/server/10003\\")" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server1/server/10003\\")" "(run-tunnel \\"post\\" \\"/server/server1/10003\\")" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (prn request)\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                     (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "@tunnel-routes" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "@runners" "@tunnel-routes" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "@tunnel" "@tunnel-routes" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "@runners" "(run-tunnel \\"get\\" \\"/hello\\")" "(run-tunnel {\:uri \\"/server\\"\\r\\n                 \:request-method \:get\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})" "(run-tunnel {\:uri \\"/hello\\"\\r\\n                    \:request-method \:get\\r\\n                    \:server-port 20\\r\\n                    \:remote-addr \\"1.1.1.1\\"\\r\\n                    \:server-name \\"command-line\\"\\r\\n                    \:schema \:http\\r\\n                    \:body System/in\\r\\n                    \:header {}})" "(http/run-server (fn [request]\\r\\n                                                      (web-balancer request))\\r\\n                                                    {\:port 10003\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})" "(defn app [req]\\r\\n  {\:status  200\\r\\n   \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n   \:body    (str \\"hello ithomer.net\\" req)})\\n(http/run-server \#'app\\r\\n                                                       {\:port 10003\\r\\n                                                        \:thread 5\\r\\n                                                        \:max-line (* 100 1024)\\r\\n                                                        \:max-body (- (* 100 1024 1024) 1)})" "(http/run-server \#'app\\r\\n                                                          {\:port 10004\\r\\n                                                           \:thread 5\\r\\n                                                           \:max-line (* 100 1024)\\r\\n                                                           \:max-body (- (* 100 1024 1024) 1)})" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port 10002\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port 10003\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})" "(http/run-server (fn [request]\\r\\n                                                         (web-balancer request))\\r\\n                                                       {\:port 10003\\r\\n                                                        \:thread 5\\r\\n                                                        \:max-line (* 100 1024)\\r\\n                                                        \:max-body (- (* 100 1024 1024) 1)})" "(http/run-server (fn [request]\\r\\n                              {\:status 200 \:body (str \\"Server started, port\: \\" port)}   )\\r\\n                                                          {\:port 10004\\r\\n                                                           \:thread 5\\r\\n                                                           \:max-line (* 100 1024)\\r\\n                                                           \:max-body (- (* 100 1024 1024) 1)})" "(http/run-server (fn [request]\\r\\n                                 {\:status 200 \:body (str \\"Server started, port\: \\" )}   )\\r\\n                                                             {\:port 10004\\r\\n                                                              \:thread 5\\r\\n                                                              \:max-line (* 100 1024)\\r\\n                                                              \:max-body (- (* 100 1024 1024) 1)})" "(http/run-server (fn [request]\\r\\n                                                           request)\\r\\n                                                          {\:port 10005\\r\\n                                                           \:thread 5\\r\\n                                                           \:max-line (* 100 1024)\\r\\n                                                           \:max-body (- (* 100 1024 1024) 1)})" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port 10002\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))" "(defn web-balancer [ring-request]\\r\\n  {\:status 200 \:body ring-request})" "(run-cancel \\"server\\")" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(defn web-balancer [ring-request]\\r\\n     (try (run-tunnel ring-request)\\r\\n       (catch Exception e\\r\\n         {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                     (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\n          \:status 500})))" "(defn web-balancer [ring-request]\\r\\n     {\:status 200 \:body ring-request})" "(defn web-balancer [ring-request]\\r\\n        (try (run-tunnel ring-request)\\r\\n          (catch Exception e\\r\\n            {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                        (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n             \:status 500})))" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(def statics (atom {}))\\r\\n(helper/extend-tunnel \:post \\"/static/add/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [label (str \\"static-\\" label)\\r\\n                              _ (helper/run-reserve label)\\r\\n                              _ (swap\! statics assoc folder path)\\r\\n                              _ (helper/run-register label\\r\\n                                                     (fn [] (swap\! statics dissoc folder))\\r\\n                                                     (fn [] (comment \\"nothing to do\\")))]\\r\\n                          {\:status 200\\r\\n                           \:body (str \\"added static \\" folder \\" -> \\" path)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(def statics (atom {}))\\r\\n(helper/extend-tunnel \:post \\"/static/add/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [label (str \\"static-\\" folder)\\r\\n                              _ (helper/run-reserve label)\\r\\n                              _ (swap\! statics assoc folder path)\\r\\n                              _ (helper/run-register label\\r\\n                                                     (fn [] (swap\! statics dissoc folder))\\r\\n                                                     (fn [] (comment \\"nothing to do\\")))]\\r\\n                          {\:status 200\\r\\n                           \:body (str \\"added static \\" folder \\" -> \\" path)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(run-tunnel \\"post\\" \\"/static/add/web/web\\")" "virgo.core" "virgo.core/statics" "(ns virgo.core\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            ;[clojure.tools.nrepl.server\:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(def statics (atom {}))\\r\\n(helper/extend-tunnel \:post \\"/static/add/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [label (str \\"static-\\" folder)\\r\\n                              _ (helper/run-reserve label)\\r\\n                              _ (swap\! statics assoc folder path)\\r\\n                              _ (helper/run-register label\\r\\n                                                     (fn [] (swap\! statics dissoc folder))\\r\\n                                                     (fn [] (comment \\"nothing to do\\")))]\\r\\n                          {\:status 200\\r\\n                           \:body (str \\"added static \\" folder \\" -> \\" path)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/web/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [root (get @statics folder)\\r\\n                              _ (when-not root (throw (Exception. (str \\"could not find folder\: \\" folder))))\\r\\n                              target (.getAbsolutePath (helper/sub-path root path))]\\r\\n                          (merge (response/file-response target)\\r\\n                                 {\:mime (mime/ext-mime-type target)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(ns virgo.helper)" "(run-tunnel \\"post\\" \\"/server/server/10002\\")" "(run-tunnel \\"post\\" \\"/static/add/web/web\\")" "(run-tunnel \\"get\\" \\"/hello\\")" "(run-tunnel \\"get\\" \\"/web/web/index.html\\")" "virgo.core/statics" "(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))" "(ns virgo.launch\\r\\n  (\:require [virgo.core \:core]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(defonce start-pairs\\r\\n  [[\\"post\\" \\"/server/server/10002\\"]\\r\\n   [\\"post\\" \\"/static/add/web/web\\"]])" "(ns virgo.launch\\r\\n  (\:require [virgo.core \:core]\\r\\n            [virgo.helper \:as helper]))" "virgo.core/statics" "virgo.helper/tunnel-routes" "(-main)" "(doseq [pair start-pairs]\\n  (prn pair))" "(doseq [pair start-pairs]\\r\\n     (type pair))" "(doseq [pair start-pairs]\\r\\n        (prn (type pair)))" "(doseq [[method uri] [\\"post\\" \\"/static/add/web/web\\"]]\\n  (prn method))" "(doseq [[method uri] [[\\"post\\" \\"/server/server/10002\\"]\\r\\n[\\"post\\" \\"/static/add/web/web\\"]]]\\r\\n     (prn method))" "(-main)" "(require 'clojure.tools.nrepl.server)" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))" "(ns core.service\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [virgo.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(def statics (atom {}))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/static/add/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [label (str \\"static-\\" folder)\\r\\n                              _ (helper/run-reserve label)\\r\\n                              _ (swap\! statics assoc folder path)\\r\\n                              _ (helper/run-register label\\r\\n                                                     (fn [] (swap\! statics dissoc folder))\\r\\n                                                     (fn [] (comment \\"nothing to do\\")))]\\r\\n                          {\:status 200\\r\\n                           \:body (str \\"added static \\" folder \\" -> \\" path)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/web/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [root (get @statics folder)\\r\\n                              _ (when-not root (throw (Exception. (str \\"could not find folder\: \\" folder))))\\r\\n                              target (.getAbsolutePath (helper/sub-path root path))]\\r\\n                          (merge (response/file-response target)\\r\\n                                 {\:mime (mime/ext-mime-type target)}))))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/maintain/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (helper/start-repl port)]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"maintain repl started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/runners/ls\\"\\r\\n                      (fn [& x] {\:status 200 \:body (str \\"running task\:\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str  @helper/runners))}))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(-main)" "@helper/runners" "(with-out-str  @helper/runners)" "(+ 1 2)" "@helper/runners" "(key  @helper/runners)" "(keys  @helper/runners)" "(ns core.service)" "(helper/extend-tunnel \:get \\"/runners/ls\\"\\r\\n                      (fn [& x] {\:status 200 \:body (str \\"running task\:\\\\r\\\\n\\"\\r\\n                                                                      (keys  @helper/runners))}))" "@helper/runners" "(helper/run-cancel \\"server\\")" "(helper/run-cancel \\"static-web\\")" "(ns core.launch)" "(-main)" "@helper/runners" "(@helper/runners \\"server\\")" "((@helper/runners \\"server\\") \:kill)" "(((@helper/runners \\"server\\") \:kill))" "(helper/run-tunnel \\"post\\" \\"/maintain/repl/17888\\")" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(ns core.service\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]\\r\\n            [core.helper \:as helper]))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/server/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (http/run-server (fn [request]\\r\\n                                                      (helper/web-balancer request))\\r\\n                                                    {\:port (Long/parseLong (str port))\\r\\n                                                     \:thread 5\\r\\n                                                     \:max-line (* 100 1024)\\r\\n                                                     \:max-body (- (* 100 1024 1024) 1)})]\\r\\n                          (do (helper/run-register label kill \:norestart)\\r\\n                          {\:status 200 \:body (str \\"Server started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(def statics (atom {}))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/static/add/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [label (str \\"static-\\" folder)\\r\\n                              _ (helper/run-reserve label)\\r\\n                              _ (swap\! statics assoc folder path)\\r\\n                              _ (helper/run-register label\\r\\n                                                     (fn [] (swap\! statics dissoc folder))\\r\\n                                                     (fn [] (comment \\"nothing to do\\")))]\\r\\n                          {\:status 200\\r\\n                           \:body (str \\"added static \\" folder \\" -> \\" path)})))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/web/\:folder/*\\"\\r\\n                      (fn [{{path \:*\\r\\n                             folder \:folder} \:params}]\\r\\n                        (let [root (get @statics folder)\\r\\n                              _ (when-not root (throw (Exception. (str \\"could not find folder\: \\" folder))))\\r\\n                              target (.getAbsolutePath (helper/sub-path root path))]\\r\\n                          (merge (response/file-response target)\\r\\n                                 {\:mime (mime/ext-mime-type target)}))))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/maintain/\:name/\:port\\"\\r\\n                      (fn [{{label \:name port \:port} \:params}]\\r\\n                        (helper/run-reserve label)\\r\\n                        (let [kill (helper/start-repl port)]\\r\\n                          (do (helper/run-register label\\r\\n                                                   (fn [] (helper/stop-repl))\\r\\n                                                   \:norestart)\\r\\n                          {\:status 200 \:body (str \\"maintain repl started, port\: \\" port \\", action\: \\" label)}))))\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/runners/ls\\"\\r\\n                      (fn [& x] {\:status 200 \:body (str \\"running task\:\\\\r\\\\n\\"\\r\\n                                                                      (keys  @helper/runners))}))\\r\\n\\r\\n(helper/extend-tunnel \:post \\"/runners/stop/\:name\\"\\r\\n                      (fn [{{label \:name} \:params}]\\r\\n                        (let [kill (helper/run-cancel label)]\\r\\n                          {\:status 200 \:body (str \\"has been stopped, action\: \\" label)})))\\r\\n\\r\\n\\r\\n(helper/extend-tunnel \:get \\"/hello\\" (fn [& x] {\:status 200 \:body (str \\"hello world----\\\\r\\\\n\\"\\r\\n                                                                      (with-out-str (clojure.pprint/pprint x)))}))" "(helper/run-tunnel \\"post\\" \\"/maintain/repl/17888\\")" "(helper/run-cancel \\"repl\\")" "@helper/repl" "(ns core.launch\\r\\n  (\:require [core.service \:as service]\\r\\n            [core.helper \:as helper]))\\r\\n\\r\\n(defonce start-pairs\\r\\n  [[\\"post\\" \\"/server/server/10002\\"]\\r\\n   [\\"post\\" \\"/static/add/web/web\\"]])\\r\\n\\r\\n(defn -main []\\r\\n  (print \\"------------------ virgo start  --------------------\\\\r\\\\n\\")\\r\\n    (helper/command-line-balancer start-pairs)\\r\\n  (print \\"------------------virgo complete--------------------\\"))" "(-main)" "(helper/run-cancel \\"repl\\")" "java.net.URIDecode" "(ns core.helper)" "(primary-log \\"test\\")" "(append-log \\"logs/virgo-primary-log.txt\\" \\"test\\")" "(defn append-log\\r\\n  [log-path message]\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      )))" "(append-log \\"logs/virgo-primary-log.txt\\" \\"test\\")" "(defn append-log\\r\\n  [log-path message]\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n        \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))" "(append-log \\"logs/virgo-primary-log.txt\\" \\"test\\")" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" ring-request )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-requst) )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\"  )))" "(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-requst) )))" "(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-request) )))" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-request) )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(-main)" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-request) )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      ;(log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))" "(ns core.helper\\r\\n  (\:require [clojure.java.io \:as jio]\\r\\n            [clojure.string \:as str]\\r\\n            [org.httpkit.client \:as client]\\r\\n            [compojure.route \:as route]\\r\\n            [compojure.core \:as comp]\\r\\n            [org.httpkit.server \:as http]\\r\\n            [clout.core \:as clout]\\r\\n            [clojure.tools.nrepl.server \:as nrepl]\\r\\n            [clojure.xml \:as xml]\\r\\n            [ring.util.response \:as response]\\r\\n            [ring.util.mime-type \:as mime]))\\r\\n\\r\\n;;------------------------helper------------------------\\r\\n\\r\\n(defn sub-path \\r\\n  ([path] (sub-path (java.io.File. \\".\\") path))\\r\\n  ([parent path]\\r\\n    (let [parent (if (instance? java.io.File parent) parent (java.io.File. parent))]\\r\\n      (when (or (nil? path) (\= \\"/\\" path) (\= \\"\\" path) (.startsWith path \\".\\"))\\r\\n        (throw (Exception. (str \\"bad name \\" path))))\\r\\n      (let [target (java.io.File. parent path)]\\r\\n        target))))\\r\\n\\r\\n(defn bytes? [x]\\r\\n  (when x\\r\\n    (\= (Class/forName \\"[B\\")\\r\\n       (.getClass x))))\\r\\n\\r\\n(defn is [a]\\r\\n  (cond (nil? a) a\\r\\n        (string? a) (java.io.ByteArrayInputStream. (.getBytes a))\\r\\n        (instance? java.io.File a) (java.io.FileInputStream. a)\\r\\n        (instance? java.io.InputStream a) a\\r\\n        (bytes? a) (java.io.ByteArrayInputStream. a)\\r\\n;        (instance? a java.io.Reader) (org.apache.common.io.input.ReaderInputStream. a)\\r\\n        \:otherwise (throw (Exception. (str \\"data needs to be of type string/reader/bytes/inpustream,\\r\\nyou provide\: \\" (if a (type a) \\"null (no value)\\"))))))\\r\\n\\r\\n;;------------------------log------------------------\\r\\n\\r\\n(defn append-log\\r\\n  [log-path message]\\r\\n  (println message)\\r\\n  (let [path (.getAbsolutePath (java.io.File. log-path))]\\r\\n    (locking path\\r\\n      (if-not\\r\\n        (.exists (.getParentFile (new java.io.File path)))\\r\\n        (.mkdirs (.getParentFile (new java.io.File path))))\\r\\n      (with-open [w (jio/writer path \:append true)\\r\\n                  out (new java.io.PrintWriter w)]\\r\\n        (.println out (str (java.util.Date.);(.format (new java.text.SimpleDataFormat \\"yyyy-MM-dd HH\:mm\:ss\\") (java.util.Date))\\r\\n                           \\" \\" (if (string? message) message (pr-str message))))\\r\\n        (.flush out)))))\\r\\n\\r\\n(def primary-log-path \\"logs/virgo-primary-log.txt\\")\\r\\n\\r\\n(def primary-log (partial append-log primary-log-path))\\r\\n\\r\\n(defn log-ring-request\\r\\n  [ring-request]\\r\\n  (primary-log (str \\"[request] \\"\\r\\n                    (\:remote-addr ring-request) \\" \\"\\r\\n                    (name (\:request-method ring-request))\\r\\n                    \\" \\" (\:uri ring-request) )));(java.net.URIDecode/decode (\:uri ring-requst) \\"UTF-8\\"))))\\r\\n\\r\\n;;------------------------tunnel------------------------\\r\\n\\r\\n(defonce tunnel (atom (comp/routes)))\\r\\n\\r\\n(defonce tunnel-routes (atom []))\\r\\n\\r\\n(defn extend-tunnel\\r\\n  ([method expression callback]\\r\\n    (extend-tunnel method expression {} callback))\\r\\n  ([method expression match-map callback]\\r\\n    (swap\! tunnel-routes (fn[x] (vec (remove \#(\= (\:expression %) expression) x))))\\r\\n    (swap\! tunnel-routes conj {\:meth method \:expression expression \:callback callback})\\r\\n    (reset\! tunnel (apply comp/routes\\r\\n                          (conj (vec (map (fn [{m \:meth e \:expression c \:callback}]\\r\\n                                            (comp/make-route m (clout/route-compile e match-map) c)) @tunnel-routes))\\r\\n                                (route/not-found \\"Page not found\\"))))))\\r\\n(defn run-tunnel\\r\\n  ([ring-request]\\r\\n    (let [uri (\:uri ring-request) ;(java.net.URIDecoder.decode (\:uri ring-request) \\"UTF-8\\")\\r\\n          uri (if (.startsWith uri \\"/\\") uri (str \\"/\\" uri))]\\r\\n      (log-ring-request ring-request)\\r\\n      (@tunnel (assoc ring-request \:uri uri))))\\r\\n  ([method uri]\\r\\n    (run-tunnel {\:uri uri\\r\\n                 \:request-method (keyword method)\\r\\n                 \:server-port 20\\r\\n                 \:remote-addr \\"1.1.1.1\\"\\r\\n                 \:server-name \\"command-line\\"\\r\\n                 \:schema \:http\\r\\n                 \:body System/in\\r\\n                 \:header {}})))\\r\\n\\r\\n;;------------------------balancer------------------------\\r\\n\\r\\n(defn command-line-balancer\\r\\n  [method-query-pairs]\\r\\n  (doseq [[method uri] method-query-pairs]\\r\\n    (println (str \\"executing request\\"))\\r\\n    (println (str \\"method \: \\" method))\\r\\n    (println (str \\"request \: \\" uri))\\r\\n    (let [{status \:status body \:body \:as result} (run-tunnel method uri)]\\r\\n          (println (str \\"status \: \\" status))\\r\\n          (jio/copy (is body) (or *out* System/out))\\r\\n          (println \\"\\"))))\\r\\n\\r\\n(defn web-balancer [ring-request]\\r\\n  (try (run-tunnel ring-request)\\r\\n    (catch Exception e\\r\\n      {\:body (str \\"failure during threading\\\\r\\\\n\\"\\r\\n                  (with-out-str (.printStackTrace e (java.io.PrintWriter. *out*))))\\r\\n       \:status 500})))\\r\\n\\r\\n;;------------------------runner------------------------\\r\\n\\r\\n(def runners (atom {}))\\r\\n\\r\\n(defn run-reserve [name]\\r\\n  (when (get @runners name)\\r\\n    (throw (Exception. (str name \\"has been rinning\\")))))\\r\\n\\r\\n(defn run-cancel [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k (fn? k )) (throw (Exception. \\"cannot be stopped\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (k)))\\r\\n\\r\\n(defn run-restart [name]\\r\\n  (when-not (get @runners name)\\r\\n    (throw (Exception. (str \\"no such runner\: \\" name ))))\\r\\n  (let [{k \:kill r \:restart} (get @runners name)]\\r\\n    (when-not (and k r (fn? k) (fn? r)) (throw (Exception. \\"cannot be restarted.\\")))\\r\\n    (swap\! runners dissoc name)\\r\\n    (try (k) (catch Throwable t \\"Swallowed\\"))\\r\\n    (r)))\\r\\n\\r\\n(defn run-register [name kill restart]\\r\\n  (when (nil? kill) (throw (Exception. \\"kill can not be nil\\")))\\r\\n  (when (nil? restart) (throw (Exception. \\"restart can not be nil\\")))\\r\\n  (when-not (or (\= \:nokill kill) (fn? kill)) (throw (Exception. \\"kill must be function or \:nokill\\")))\\r\\n  (when-not (or (\= \:norestart restart) (fn? restart)) (throw (Exception. \\"restart must be function or \:norestart\\")))\\r\\n  (when (and (\= \:nokill kill) (fn? restart)) (throw (Exception. \\"kill cannot be \:nokill because there is a restart\\")))\\r\\n  (run-reserve name)\\r\\n  (swap\! runners assoc name {\:kill kill\\r\\n                             \:restart restart}))\\r\\n\\r\\n(defn run-complete [name]\\r\\n  (swap\! runners dissoc name))\\r\\n\\r\\n;;------------------------nrepl------------------------\\r\\n\\r\\n(defonce repl (atom nil))\\r\\n\\r\\n(defn start-repl [port]\\r\\n  (nrepl/start-server \:port (Long/parseLong (str port))))\\r\\n\\r\\n(defn stop-repl []\\r\\n  (when-not (nil? @repl)\\r\\n    (reset\! repl nil)))"]
eclipse.preferences.version=1
